.TH BNE 99 "June 2025" "MOS 6502 Instruction Set" "Kick'N'Vim Manual"

.SH NAME
bne \- Branch if Not Equal (Zero flag clear)

.SH SYNOPSIS
.B bne
\fIrelative-address\fR

.SH DESCRIPTION
BNE (Branch if Not Equal) is a conditional branch instruction of the MOS 6502 processor. It causes the program counter (PC) to jump to a new location if the zero flag (Z) is clear (i.e., equals zero).

This instruction is typically used after operations that affect the zero flag, such as CMP, CPX, CPY, or arithmetic instructions, allowing conditional control flow based on inequality comparisons.

The branch offset is an 8-bit signed value ranging from -128 to +127 bytes, relative to the address of the instruction following BNE.

.SH OPCODE
.TS
l l l l.
Addressing Mode	Opcode	Bytes	Cycles
Relative	$D0	2	2 (+1 if branch taken, +1 if page crossed)
.TE

.SH FLAGS AFFECTED
.TP
None.
BNE only checks the zero flag but does not modify any processor status flags.

.SH EXAMPLES
.TP
.B Conditional branch
.nf
    LDA #$01     ; Load 1 into accumulator
    CMP #$02     ; Compare accumulator with 2
    BNE notEqual ; Branch if zero flag is clear (A != 2)

    ; code for A == 2 continues here

notEqual:
    ; code for A != 2
.fi

.SH NOTES
- BNE is commonly used after CMP, CPX, or CPY for inequality comparisons.
- If the branch crosses a page boundary, the CPU requires one extra cycle.
- The target must be within -128 to +127 bytes of the instruction following BNE.

.SH SEE ALSO
beq(99), bcc(99), bcs(99), cmp(99)

.SH AUTHOR
Adapted for manpage usage by Stephan P. A. Strauss

