.TH ALR 99 "May 2025" "MOS 6502 Undocumented Opcodes" "Kick'N'Vim Manual"

.SH NAME
alr \- AND Accumulator with Immediate then Logical Shift Right

.SH SYNOPSIS
.B alr
\fI#immediate\fR

.SH DESCRIPTION
ALR (also known as ASR) is an undocumented instruction of the MOS 6502 processor. It performs a bitwise AND between the accumulator and an immediate value, then logically shifts the result one bit to the right. The final result is stored back in the accumulator.

This instruction is equivalent to executing an AND operation followed by a Logical Shift Right (LSR) on the accumulator.

.SH OPCODE
.nf
Addressing Mode   Opcode   Bytes   Cycles
Immediate         $4B      2       2
.fi

.SH FLAGS AFFECTED
.TP
.B Carry (C)
Set to the value of bit 0 of the result (i.e., the bit shifted out).
.TP
.B Zero (Z)
Set if the result is zero; cleared otherwise.
.TP
.B Negative (N)
Set if bit 7 of the result is set; cleared otherwise.

.SH EXAMPLE
.nf
    LDA #$FF      ; Load accumulator with $FF
    ALR #$0F      ; A = ($FF AND $0F) >> 1 = $07
    ; Result: A = $07, C = 1, Z = 0, N = 0
.fi

.SH NOTES
\&- ALR is an undocumented instruction and may not be supported on all 6502 variants.
\&- Its behavior is consistent on NMOS 6502 processors but may differ on CMOS versions like the 65C02.
\&- Use with caution in cross-platform applications.

.SH SEE ALSO
and(99), lsr(99), anc(99), arr(99)

.SH AUTHOR
Adapted for manpage usage by Stephan P. A. Strauss
